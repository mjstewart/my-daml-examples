daml 1.2
module AtomicFlow where

data CoinKey = CoinKey with
  owner : Party
  id : Text
    deriving (Show, Eq)

toCoinKey : Coin -> CoinKey
toCoinKey Coin{..} = CoinKey with ..


template Coin
  with
    owner : Party
    id : Text
    amount : Decimal
  where
    signatory owner

    key CoinKey with .. : CoinKey
    maintainer key.owner

    -- Alice wants to transfer the amount contained in her coin to bob.
    controller owner can
      Coin_CommitTransfer : ContractId CommittedCoin
        with
          receivingCoinKey : CoinKey
        do
          -- Alice updates her account without involving bob
          create this with amount = 0.0

          proposalCid <- create TransferCoinAmountProposal with
            sendingCoinKey = toCoinKey this
            receivingCoinKey
            amount

          create CommittedCoin with
            sender = owner
            receiver = receivingCoinKey.owner
            proposalCid

      -- Same thing as the above but combines the proposal and commited coin concept.
      Coin_CommitTransfer2 : ContractId TransferCommitmentProposal
        with
          receivingCoinKey : CoinKey
        do
          create this with amount = 0.0

          create TransferCommitmentProposal with
            sendingCoinKey = toCoinKey this
            receivingCoinKey
            amount

      Coin_ApplyAmount : ContractId Coin
        with
          delta : Decimal
        do
          create this with amount = amount + delta

template CommittedCoin
  with
    sender : Party
    receiver : Party
    proposalCid : ContractId TransferCoinAmountProposal
  where
    signatory sender

    controller sender can

      CommittedCoin_SenderRollback : ()
        do
         proposal <- fetch proposalCid

         exerciseByKey @Coin proposal.sendingCoinKey $ Coin_ApplyAmount proposal.amount
         archive proposalCid

         pure ()

    controller receiver can
      CommittedCoin_ReceiverAcceptProposal : ()
        do
         proposal <- fetch proposalCid

         exerciseByKey @Coin proposal.receivingCoinKey $ Coin_ApplyAmount proposal.amount
         exercise proposalCid TransferCoinAmountProposal_Accept

         pure ()


template TransferCoinAmountProposal
  with
    sendingCoinKey : CoinKey
    receivingCoinKey : CoinKey
    amount : Decimal
  where
    signatory sendingCoinKey.owner

    controller sendingCoinKey.owner, receivingCoinKey.owner can
      TransferCoinAmountProposal_Accept : ContractId TransferredCoinAmount
        do
          create TransferredCoinAmount with ..


-- Represents when both alice and bob have actioned the transfer
template TransferredCoinAmount
  with
    sendingCoinKey : CoinKey
    receivingCoinKey : CoinKey
    amount : Decimal
  where
    signatory sendingCoinKey.owner, receivingCoinKey.owner



-- It appears this contract can act the same as the CoinCommitment contract.
template TransferCommitmentProposal
  with
    sendingCoinKey : CoinKey
    receivingCoinKey : CoinKey
    amount : Decimal
  where
    signatory sendingCoinKey.owner

    controller sendingCoinKey.owner can

      TransferCommitmentProposal_SenderRollback : ()
        do
         exerciseByKey @Coin sendingCoinKey $ Coin_ApplyAmount amount
         pure ()

    controller receivingCoinKey.owner can
      TransferCommitmentProposal_ReceiverAcceptProposal : ()
        do
         -- Once Bob accepts completing the transfer process between the 2 parties.
         exerciseByKey @Coin receivingCoinKey $ Coin_ApplyAmount amount
         create TransferredCoinAmount with ..

         pure ()


test = scenario do
  [alice, bob] <- mapA getParty ["Alice", "Bob"]

  _aliceCoin <- submit alice do
    create Coin with owner = alice; id = "1"; amount = 100.0

  _bobCoin <- submit bob do
    create Coin with owner = bob; id = "2"; amount = 100.0

  _aliceCommit <- submit alice do
    exercise _aliceCoin Coin_CommitTransfer with receivingCoinKey = CoinKey bob "2"

  submit bob do
    exercise _aliceCommit CommittedCoin_ReceiverAcceptProposal

  -- submit bob do
    -- exercise _aliceCommit TransferCommitmentProposal_ReceiverAcceptProposal
